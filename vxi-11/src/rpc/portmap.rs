use async_std::net::ToSocketAddrs;
use crate::rpc::RpcProto;

#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub(crate) mod xdr {
    //! Autogenerated by xdrgen
    use xdr_codec;
    use crate::rpc::RpcProto;

    #[allow(dead_code)]
    include!(concat!(env!("OUT_DIR"), "/portmap_xdr.rs"));

    impl mapping {
        pub(crate) fn new(prog: u32, vers: u32, prot: RpcProto, port: u32) -> Self {
            mapping {
                prog,
                vers,
                prot: prot.prot(),
                port
            }
        }
    }
}

struct PortmapClient {

}

impl PortmapClient {
    async fn set(&self, prog: u32, vers: u32, proto: RpcProto, port: u16) {

    }

    async fn unset(&self, prog: u32, vers: u32, proto: RpcProto) {

    }

    async fn get_port(&self, prog: u32, vers: u32, proto: RpcProto) -> Option<u16> {
        None
    }

}